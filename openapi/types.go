// Package Epr provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package Epr

// Category defines model for Category.
type Category struct {
	Count *int    `json:"count,omitempty"`
	Id    *string `json:"id,omitempty"`
	Title *string `json:"title,omitempty"`
}

// Dataset defines model for Dataset.
type Dataset struct {
	IngestPipeline *string                  `json:"ingest_pipeline,omitempty"`
	Name           string                   `json:"name"`
	Package        string                   `json:"package"`
	Release        string                   `json:"release"`
	Title          string                   `json:"title"`
	Type           string                   `json:"type"`
	Vars           []map[string]interface{} `json:"vars"`
}

// Image defines model for Image.
type Image struct {
	Size  *string `json:"size,omitempty"`
	Src   *string `json:"src,omitempty"`
	Title *string `json:"title,omitempty"`
	Type  *string `json:"type,omitempty"`
}

// Kibana defines model for Kibana.
type Kibana struct {
	Versions *string `json:"versions,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Assets        *[]string   `json:"assets,omitempty"`
	Categories    []string    `json:"categories"`
	Datasets      *[]Dataset  `json:"datasets,omitempty"`
	Description   string      `json:"description"`
	Download      string      `json:"download"`
	Formatversion string      `json:"formatversion"`
	Icons         *[]Image    `json:"icons,omitempty"`
	Internal      *bool       `json:"internal,omitempty"`
	Name          string      `json:"name"`
	Path          string      `json:"path"`
	Readme        *string     `json:"readme,omitempty"`
	Requirement   Requirement `json:"requirement"`
	Screenshots   *[]Image    `json:"screenshots,omitempty"`
	Title         *string     `json:"title,omitempty"`
	Version       string      `json:"version"`
}

// Requirement defines model for Requirement.
type Requirement struct {
	Kibana Kibana `json:"Kibana"`
}

// RootInfo defines model for Root-Info.
type RootInfo struct {
	ServiceName *string `json:"service.name,omitempty"`
	Version     *string `json:"version,omitempty"`
}

// GetSearchParams defines parameters for GetSearch.
type GetSearchParams struct {

	// Filters out all the packages which are not compatible with the given Kibana version. If it is set to 7.3.1 and a package requires 7.4, the package will not be returned or an older compatible package will be shown. By default this endpoint always returns only the newest compatible package.
	Kibana *string `json:"kibana,omitempty"`

	// Filters the package by the given category. Available categories can be seend when going to /categories endpoint.
	Category *string `json:"category,omitempty"`

	// Filters by a specific package name, for example mysql. In contrast to the other endpoints, it will return by default all versions of this package.
	Package *string `json:"package,omitempty"`

	// This can be set to true, to also list internal packages. This is set to false by default.
	Internal *string `json:"internal,omitempty"`
}
